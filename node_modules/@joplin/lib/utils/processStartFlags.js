"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("@joplin/utils/Logger");
const JoplinError_1 = require("../JoplinError");
const locale_1 = require("../locale");
const Setting_1 = require("../models/Setting");
const Note_1 = require("../models/Note");
// Handles the initial flags passed to main script and
// returns the remaining args.
const processStartFlags = (argv, setDefaults = true) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const matched = {};
    argv = argv.slice(0);
    argv.splice(0, 2); // First arguments are the node executable, and the node JS file
    while (argv.length) {
        const arg = argv[0];
        const nextArg = argv.length >= 2 ? argv[1] : null;
        if (arg === '--profile') {
            if (!nextArg)
                throw new JoplinError_1.default((0, locale_1._)('Usage: %s', '--profile <dir-path>'), 'flagError');
            matched.profileDir = nextArg;
            argv.splice(0, 2);
            continue;
        }
        if (arg === '--no-welcome') {
            matched.welcomeDisabled = true;
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--env') {
            if (!nextArg)
                throw new JoplinError_1.default((0, locale_1._)('Usage: %s', '--env <dev|prod>'), 'flagError');
            matched.env = nextArg;
            argv.splice(0, 2);
            continue;
        }
        if (arg === '--is-demo') {
            Setting_1.default.setConstant('isDemo', true);
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--safe-mode') {
            matched.isSafeMode = true;
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--open-dev-tools') {
            Setting_1.default.setConstant('flagOpenDevTools', true);
            argv.splice(0, 1);
            continue;
        }
        if (arg.startsWith('--dns-result-order=')) {
            matched.allowOverridingDnsResultOrder = false;
            // Handled by Electron/NodeJS (and indicates we shouldn't override this ourselves).
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--debug') {
            // Currently only handled by ElectronAppWrapper (isDebugMode property)
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--update-geolocation-disabled') {
            Note_1.default.updateGeolocationEnabled_ = false;
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--stack-trace-enabled') {
            matched.showStackTraces = true;
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--log-level') {
            if (!nextArg)
                throw new JoplinError_1.default((0, locale_1._)('Usage: %s', '--log-level <none|error|warn|info|debug>'), 'flagError');
            matched.logLevel = Logger_1.default.levelStringToId(nextArg);
            argv.splice(0, 2);
            continue;
        }
        if (arg.indexOf('-psn') === 0) {
            // Some weird flag passed by macOS - can be ignored.
            // https://github.com/laurent22/joplin/issues/480
            // https://stackoverflow.com/questions/10242115
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--enable-logging') {
            // Electron-specific flag used for debugging - ignore it
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--dev-plugins') {
            matched.devPlugins = nextArg.split(',').map(p => p.trim());
            Setting_1.default.setConstant('startupDevPlugins', matched.devPlugins);
            argv.splice(0, 2);
            continue;
        }
        if (arg.indexOf('--remote-debugging-port=') === 0) {
            // Electron-specific flag used for debugging - ignore it. Electron expects this flag in '--x=y' form, a single string.
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--no-sandbox') {
            // Electron-specific flag for running the app without chrome-sandbox
            // Allows users to use it as a workaround for the electron+AppImage issue
            // https://github.com/laurent22/joplin/issues/2246
            argv.splice(0, 1);
            continue;
        }
        if (arg.indexOf('--user-data-dir=') === 0) {
            // Electron-specific flag. Allows users to run the app with chromedriver.
            argv.splice(0, 1);
            continue;
        }
        if (arg.indexOf('--enable-features=') === 0) {
            // Electron-specific flag - ignore it
            // Allows users to run the app on native wayland
            argv.splice(0, 1);
            continue;
        }
        if (arg.indexOf('--ozone-platform=') === 0) {
            // Electron-specific flag - ignore it
            // Allows users to run the app on native wayland
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--disable-smooth-scrolling') {
            // Electron-specific flag - ignore it
            // Allows users to disable smooth scrolling
            argv.splice(0, 1);
            continue;
        }
        if (arg === '--disable-gpu') {
            // Electron-specific flag - ignore it
            // Allows users to disable GPU acceleration
            argv.splice(0, 1);
            continue;
        }
        if (arg.length && arg[0] === '-') {
            throw new JoplinError_1.default((0, locale_1._)('Unknown flag: %s', arg), 'flagError');
        }
        else {
            break;
        }
    }
    if (setDefaults) {
        if (!matched.logLevel)
            matched.logLevel = Logger_1.default.LEVEL_INFO;
        if (!matched.env)
            matched.env = 'prod';
        if (!matched.devPlugins)
            matched.devPlugins = [];
        (_a = matched.allowOverridingDnsResultOrder) !== null && _a !== void 0 ? _a : (matched.allowOverridingDnsResultOrder = true);
    }
    return {
        matched: matched,
        argv: argv,
    };
});
exports.default = processStartFlags;
//# sourceMappingURL=processStartFlags.js.map