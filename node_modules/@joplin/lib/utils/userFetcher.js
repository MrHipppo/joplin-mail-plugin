"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeUserFetcher = void 0;
const SyncTargetRegistry_1 = require("../SyncTargetRegistry");
const eventManager_1 = require("../eventManager");
const Setting_1 = require("../models/Setting");
const registry_1 = require("../registry");
const Logger_1 = require("@joplin/utils/Logger");
const logger = Logger_1.default.create('userFetcher');
const userFetcher = () => __awaiter(void 0, void 0, void 0, function* () {
    if (Setting_1.default.value('sync.target') !== SyncTargetRegistry_1.default.nameToId('joplinCloud')) {
        return;
    }
    const syncTarget = registry_1.reg.syncTarget();
    const fileApi = yield syncTarget.fileApi();
    const api = fileApi.driver().api();
    if (!api.userId) {
        // That can happen if we don't have a session yet or if it has been
        // cleared
        logger.info('Skipping fetching user because user ID is not available');
        return;
    }
    const owner = yield api.exec('GET', `api/users/${api.userId}`);
    logger.info('Got user:', owner);
    Setting_1.default.setValue('sync.10.inboxId', owner.inbox ? owner.inbox.jop_id : '');
    Setting_1.default.setValue('sync.10.inboxEmail', owner.inbox_email ? owner.inbox_email : '');
    Setting_1.default.setValue('sync.10.canUseSharePermissions', !!owner.can_use_share_permissions);
    Setting_1.default.setValue('sync.10.accountType', owner.account_type);
});
// Listen to the event only once
const initializeUserFetcher = () => {
    eventManager_1.default.once('sessionEstablished', userFetcher);
};
exports.initializeUserFetcher = initializeUserFetcher;
exports.default = userFetcher;
//# sourceMappingURL=userFetcher.js.map