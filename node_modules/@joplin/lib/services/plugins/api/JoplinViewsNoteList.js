"use strict";
/* eslint-disable multiline-comment-style */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const renderers_1 = require("../../noteList/renderers");
/**
 * This API allows you to customise how each note in the note list is rendered.
 * The renderer you implement follows a unidirectional data flow.
 *
 * The app provides the required dependencies whenever a note is updated - you
 * process these dependencies, and return some props, which are then passed to
 * your template and rendered. See [[[ListRenderer]]] for a detailed description
 * of each property of the renderer.
 *
 * [View the demo plugin](https://github.com/laurent22/joplin/tree/dev/packages/app-cli/tests/support/plugins/note_list_renderer)
 *
 * The default list renderer is implemented using the same API, so it worth checking it too:
 *
 * [Default list renderer](https://github.com/laurent22/joplin/tree/dev/packages/lib/services/noteList/defaultListRenderer.ts)
 */
class JoplinViewsNoteList {
    constructor(plugin, store) {
        this.plugin_ = plugin;
        this.store_ = store;
    }
    registerRenderer(renderer) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, renderers_1.registerRenderer)(this.store_, Object.assign(Object.assign({}, renderer), { id: `${this.plugin_.id}:${renderer.id}` }));
        });
    }
}
exports.default = JoplinViewsNoteList;
//# sourceMappingURL=JoplinViewsNoteList.js.map