"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseModel_1 = require("../../../BaseModel");
const BaseItem_1 = require("../../../models/BaseItem");
const ItemChange_1 = require("../../../models/ItemChange");
const Resource_1 = require("../../../models/Resource");
const time_1 = require("../../../time");
const resourceRemotePath_1 = require("./resourceRemotePath");
exports.default = (syncTargetId, cancelling, logSyncOperation, apiCall, dispatch) => __awaiter(void 0, void 0, void 0, function* () {
    const deletedItems = yield BaseItem_1.default.deletedItems(syncTargetId);
    for (let i = 0; i < deletedItems.length; i++) {
        if (cancelling)
            break;
        const item = deletedItems[i];
        const path = BaseItem_1.default.systemPath(item.item_id);
        const isResource = item.item_type === BaseModel_1.default.TYPE_RESOURCE;
        try {
            yield apiCall('delete', path);
            if (isResource) {
                const remoteContentPath = (0, resourceRemotePath_1.default)(item.item_id);
                yield apiCall('delete', remoteContentPath);
            }
            logSyncOperation('deleteRemote', null, { id: item.item_id }, 'local has been deleted');
        }
        catch (error) {
            if (error.code === 'isReadOnly') {
                let remoteContent = yield apiCall('get', path);
                if (remoteContent) {
                    remoteContent = yield BaseItem_1.default.unserialize(remoteContent);
                    const ItemClass = BaseItem_1.default.itemClass(item.item_type);
                    let nextQueries = BaseItem_1.default.updateSyncTimeQueries(syncTargetId, remoteContent, time_1.default.unixMs());
                    if (isResource) {
                        nextQueries = nextQueries.concat(Resource_1.default.setLocalStateQueries(remoteContent.id, {
                            fetch_status: Resource_1.default.FETCH_STATUS_IDLE,
                        }));
                    }
                    yield ItemClass.save(remoteContent, { isNew: true, autoTimestamp: false, changeSource: ItemChange_1.default.SOURCE_SYNC, nextQueries });
                    if (isResource)
                        dispatch({ type: 'SYNC_CREATED_OR_UPDATED_RESOURCE', id: remoteContent.id });
                }
            }
            else {
                throw error;
            }
        }
        yield BaseItem_1.default.remoteDeletedItem(syncTargetId, item.item_id);
    }
});
//# sourceMappingURL=syncDeleteStep.js.map