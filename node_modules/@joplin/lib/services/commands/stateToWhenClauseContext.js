"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const reducer_1 = require("../../reducer");
const BaseModel_1 = require("../../BaseModel");
const Folder_1 = require("../../models/Folder");
const MarkupToHtml_1 = require("@joplin/renderer/MarkupToHtml");
const reducer_2 = require("../share/reducer");
const readOnly_1 = require("../../models/utils/readOnly");
const ItemChange_1 = require("../../models/ItemChange");
function stateToWhenClauseContext(state, options = null) {
    options = Object.assign({ commandFolderId: '', commandNoteId: '' }, options);
    const selectedNoteIds = state.selectedNoteIds || [];
    const selectedNoteId = selectedNoteIds.length === 1 ? selectedNoteIds[0] : null;
    const selectedNote = selectedNoteId ? BaseModel_1.default.byId(state.notes, selectedNoteId) : null;
    const commandFolderId = options.commandFolderId || state.selectedFolderId;
    const commandFolder = commandFolderId ? BaseModel_1.default.byId(state.folders, commandFolderId) : null;
    const settings = state.settings || {};
    return {
        // Application state
        notesAreBeingSaved: reducer_1.stateUtils.hasNotesBeingSaved(state),
        syncStarted: state.syncStarted,
        // Current location
        inConflictFolder: state.selectedFolderId === Folder_1.default.conflictFolderId(),
        // Note selection
        oneNoteSelected: !!selectedNote,
        someNotesSelected: selectedNoteIds.length > 0,
        multipleNotesSelected: selectedNoteIds.length > 1,
        noNotesSelected: !selectedNoteIds.length,
        // Note history
        historyhasBackwardNotes: state.backwardHistoryNotes && state.backwardHistoryNotes.length > 0,
        historyhasForwardNotes: state.forwardHistoryNotes && state.forwardHistoryNotes.length > 0,
        // Folder selection
        oneFolderSelected: !!state.selectedFolderId,
        // Current note properties
        noteIsTodo: selectedNote ? !!selectedNote.is_todo : false,
        noteTodoCompleted: selectedNote ? !!selectedNote.todo_completed : false,
        noteIsMarkdown: selectedNote ? selectedNote.markup_language === MarkupToHtml_1.default.MARKUP_LANGUAGE_MARKDOWN : false,
        noteIsHtml: selectedNote ? selectedNote.markup_language === MarkupToHtml_1.default.MARKUP_LANGUAGE_HTML : false,
        // Current context folder
        folderIsShareRoot: commandFolder ? (0, reducer_2.isRootSharedFolder)(commandFolder) : false,
        folderIsShareRootAndNotOwnedByUser: commandFolder ? (0, reducer_2.isRootSharedFolder)(commandFolder) && !(0, reducer_2.isSharedFolderOwner)(state, commandFolder.id) : false,
        folderIsShareRootAndOwnedByUser: commandFolder ? (0, reducer_2.isRootSharedFolder)(commandFolder) && (0, reducer_2.isSharedFolderOwner)(state, commandFolder.id) : false,
        folderIsShared: commandFolder ? !!commandFolder.share_id : false,
        joplinServerConnected: [9, 10].includes(settings['sync.target']),
        joplinCloudAccountType: settings['sync.target'] === 10 ? settings['sync.10.accountType'] : 0,
        hasMultiProfiles: state.profileConfig && state.profileConfig.profiles.length > 1,
        noteIsReadOnly: selectedNote ? (0, readOnly_1.itemIsReadOnlySync)(BaseModel_1.ModelType.Note, ItemChange_1.default.SOURCE_UNSPECIFIED, selectedNote, settings['sync.userId'], state.shareService) : false,
        folderIsReadOnly: commandFolder ? (0, readOnly_1.itemIsReadOnlySync)(BaseModel_1.ModelType.Note, ItemChange_1.default.SOURCE_UNSPECIFIED, commandFolder, settings['sync.userId'], state.shareService) : false,
    };
}
exports.default = stateToWhenClauseContext;
//# sourceMappingURL=stateToWhenClauseContext.js.map