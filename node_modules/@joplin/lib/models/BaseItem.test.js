"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_utils_1 = require("../testing/test-utils");
const BaseItem_1 = require("./BaseItem");
const Folder_1 = require("./Folder");
const Note_1 = require("./Note");
describe('BaseItem', () => {
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        yield (0, test_utils_1.setupDatabaseAndSynchronizer)(1);
        yield (0, test_utils_1.switchClient)(1);
    }));
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield (0, test_utils_1.afterAllCleanUp)();
    }));
    // This is to handle the case where a property is removed from a BaseItem table - in that case files in
    // the sync target will still have the old property but we don't need it locally.
    it('should ignore properties that are present in sync file but not in database when serialising', () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = yield Folder_1.default.save({ title: 'folder1' });
        let serialized = yield Folder_1.default.serialize(folder);
        serialized += '\nignore_me: true';
        const unserialized = yield Folder_1.default.unserialize(serialized);
        expect('ignore_me' in unserialized).toBe(false);
    }));
    it('should not modify title when unserializing', () => __awaiter(void 0, void 0, void 0, function* () {
        const folder1 = yield Folder_1.default.save({ title: '' });
        const folder2 = yield Folder_1.default.save({ title: 'folder1' });
        const serialized1 = yield Folder_1.default.serialize(folder1);
        const unserialized1 = yield Folder_1.default.unserialize(serialized1);
        expect(unserialized1.title).toBe(folder1.title);
        const serialized2 = yield Folder_1.default.serialize(folder2);
        const unserialized2 = yield Folder_1.default.unserialize(serialized2);
        expect(unserialized2.title).toBe(folder2.title);
    }));
    it('should correctly unserialize note timestamps', () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = yield Folder_1.default.save({ title: 'folder' });
        const note = yield Note_1.default.save({ title: 'note', parent_id: folder.id });
        const serialized = yield Note_1.default.serialize(note);
        const unserialized = yield Note_1.default.unserialize(serialized);
        expect(unserialized.created_time).toEqual(note.created_time);
        expect(unserialized.updated_time).toEqual(note.updated_time);
        expect(unserialized.user_created_time).toEqual(note.user_created_time);
        expect(unserialized.user_updated_time).toEqual(note.user_updated_time);
    }));
    it('should serialize geolocation fields', () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = yield Folder_1.default.save({ title: 'folder' });
        let note = yield Note_1.default.save({ title: 'note', parent_id: folder.id });
        note = yield Note_1.default.load(note.id);
        let serialized = yield Note_1.default.serialize(note);
        let unserialized = yield Note_1.default.unserialize(serialized);
        expect(unserialized.latitude).toEqual('0.00000000');
        expect(unserialized.longitude).toEqual('0.00000000');
        expect(unserialized.altitude).toEqual('0.0000');
        yield Note_1.default.save({
            id: note.id,
            longitude: -3.459,
            altitude: 0,
            latitude: 48.732,
        });
        note = yield Note_1.default.load(note.id);
        serialized = yield Note_1.default.serialize(note);
        unserialized = yield Note_1.default.unserialize(serialized);
        expect(unserialized.latitude).toEqual(note.latitude);
        expect(unserialized.longitude).toEqual(note.longitude);
        expect(unserialized.altitude).toEqual(note.altitude);
    }));
    it('should serialize and unserialize notes', () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = yield Folder_1.default.save({ title: 'folder' });
        const note = yield Note_1.default.save({ title: 'note', parent_id: folder.id });
        yield Note_1.default.save({
            id: note.id,
            longitude: -3.459,
            altitude: 0,
            latitude: 48.732,
        });
        const noteBefore = yield Note_1.default.load(note.id);
        const serialized = yield Note_1.default.serialize(noteBefore);
        const noteAfter = yield Note_1.default.unserialize(serialized);
        expect(noteAfter).toEqual(noteBefore);
    }));
    it('should serialize and unserialize properties that contain new lines', () => __awaiter(void 0, void 0, void 0, function* () {
        const sourceUrl = `
https://joplinapp.org/ \\n
`;
        const note = yield Note_1.default.save({ title: 'note', source_url: sourceUrl });
        const noteBefore = yield Note_1.default.load(note.id);
        const serialized = yield Note_1.default.serialize(noteBefore);
        const noteAfter = yield Note_1.default.unserialize(serialized);
        expect(noteAfter).toEqual(noteBefore);
    }));
    it('should not serialize the note title and body', () => __awaiter(void 0, void 0, void 0, function* () {
        const note = yield Note_1.default.save({ title: 'my note', body: `one line
two line
three line \\n no escape` });
        const noteBefore = yield Note_1.default.load(note.id);
        const serialized = yield Note_1.default.serialize(noteBefore);
        expect(serialized.indexOf(`my note

one line
two line
three line \\n no escape`)).toBe(0);
    }));
    it('should update item sync item', () => __awaiter(void 0, void 0, void 0, function* () {
        const note1 = yield Note_1.default.save({});
        const syncTime = (itemId) => __awaiter(void 0, void 0, void 0, function* () {
            const syncItem = yield BaseItem_1.default.syncItem((0, test_utils_1.syncTargetId)(), itemId, { fields: ['sync_time'] });
            return syncItem ? syncItem.sync_time : 0;
        });
        expect(yield syncTime(note1.id)).toBe(0);
        yield (0, test_utils_1.synchronizerStart)();
        const newTime = yield syncTime(note1.id);
        expect(newTime).toBeLessThanOrEqual(Date.now());
        // Check that it doesn't change if we sync again
        yield (0, test_utils_1.msleep)(1);
        yield (0, test_utils_1.synchronizerStart)();
        expect(yield syncTime(note1.id)).toBe(newTime);
    }));
});
//# sourceMappingURL=BaseItem.test.js.map